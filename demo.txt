<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Basic TreeGrid - jQuery EasyUI Demo</title>
    <link rel="stylesheet" type="text/css" href="./jquery-easyui-1.3.3/themes/default/easyui.css">
    <link rel="stylesheet" type="text/css" href="./jquery-easyui-1.3.3/themes/icon.css">
    <link rel="stylesheet" type="text/css" href="./jquery-easyui-1.3.3/demo/demo.css">
    <script type="text/javascript" src="./jquery-easyui-1.3.3/jquery.min.js"></script>
    <script type="text/javascript" src="./jquery-easyui-1.3.3/jquery.easyui.min.js"></script>
    <script type="text/javascript" src="./jquery-easyui-1.3.3/locale/easyui-lang-zh_CN.js"></script>
</head>
<script type="text/javascript">
    function pro() {
        $.messager.show({
            title: '输入实例',     //头部面板上显示的标题文本
            msg: '导师：张三<br>2016级博士生：天一、王二、吴五<br>刘六：JAVA、数学建模',    //要显示的消息文本
            showType: 'slide',     // 定义消息窗口如何显示,默认是 slide
            style: {        //定义消息窗口的自定义样式
                right: '',
                top: document.body.scrollTop + document.documentElement.scrollTop,
                bottom: ''
            }
        });
    }

    function show() {
        text = $("#text").val();//获取文本框文字
        text_arr = text.split('\n');//文字按行分割
        var flag_count = [];
        //记录导师所在行的索引
        for (var f = 0; f < text_arr.length; f++) {
            if (text_arr[f].indexOf("导师") !== -1) {
                flag_count.push(f);
            }
        }
        var mentor = [];
        var id = 0;
        for (var ff = 0; ff < flag_count.length; ff++) {
            //确定一个导师下的所有学生的起始索引和终止索引
            var begin = flag_count[ff];
            var end = 0;
            if (flag_count.length === 1 || ff === flag_count.length - 1) {
                end = text_arr.length;
            } else {
                end = flag_count[ff + 1];
            }

            var student = [];
            var grade = [];
            //获取学生的技能，使之转成JSON数据
            for (var i = begin; i < end; i++) {
                if (text_arr[i].indexOf("级博士生") === -1 && text_arr[i].indexOf("级硕士生") === -1 &&
                    text_arr[i].indexOf("级本科生") === -1 && text_arr[i].indexOf("导师") === -1 && text_arr[i] !== "") {
                    var temp1 = text_arr[i].split('：');
                    var temp2 = temp1[0];
                    var temp3 = temp1[1].split('、');
                    var temp4 = [];
                    for (var j = 0; j < temp3.length; j++) {
                        temp4.push({"id": id++, "name": temp3[j], "skills": temp3[j]});
                    }
                    student.push({"id": id++, "name": temp2, "student": temp2, "children": temp4});
                }
            }
            //获取每个年级下的学生，并将学生技能补充进来
            for (var q = begin; q < end; q++) {
                if (text_arr[q].indexOf("级博士生") !== -1 || text_arr[q].indexOf("级硕士生") !== -1 ||
                    text_arr[q].indexOf("级本科生") !== -1 && text_arr[q] !== "") {
                    var demo1 = text_arr[q].split('：');
                    var demo2 = demo1[0];
                    var demo3 = demo1[1].split('、');
                    var demo4 = [];
                    for (var k = 0; k < demo3.length; k++) {
                        var flag = 0;
                        for (var m = 0; m < student.length; m++) {
                            if (student[m].student === demo3[k]) {
                                demo4.push({
                                    "id": id++,
                                    "name": demo3[k],
                                    "student": demo3[k],
                                    "children": student[m].children
                                })
                                flag = 1;
                            }
                        }
                        if (flag === 0) {
                            demo4.push({"id": id++, "name": demo3[k], "student": demo3[k]});
                        }
                    }
                    grade.push({"id": id++, "name": demo2, "grade": demo2, "children": demo4});
                }
            }
            //获取导师数据，补充年级学生技能数据，使之成为JSON格式的数据（导师-年级-学生-技能）
            for (var n = begin; n < end; n++) {
                if (text_arr[n].indexOf("导师") !== -1 && text_arr[n] !== "") {
                    var t = text_arr[n].split("：");
                    var men = t[1];
                    mentor.push({"id": id++, "name": '导师：'+men, "mentor": men, "children": grade});
                }
            }
        }
        console.log(mentor);
        var Mentor = [];
        var delete_num = [];
        //以下几个循环的目的是补充导师下的学生是导师的情况，可以支持N重导师嵌套
        for (var me = mentor.length-1; me >=0 ;me--){
            var mentor_name = [];
            for (var ment = 0; ment < mentor.length; ment++){
                // if (ment !== me){
                    mentor_name.push(mentor[ment]);
                // }
            }
            for (var mento = 0; mento < mentor[me].children.length;mento++){
                for (var mentoe = 0; mentoe < mentor[me].children[mento].children.length;mentoe++){
                    var name_test = mentor[me].children[mento].children[mentoe].name;
                    for (var fg = 0; fg < mentor_name.length;fg++){
                        if ('导师：' + name_test === mentor_name[fg].name && ment !== me){
                            // alert(name_test);
                            mentor[me].children[mento].children[mentoe].name = mentor_name[fg].name;
                            mentor[me].children[mento].children[mentoe].children = mentor_name[fg].children;
                            // delete mentor[fg];
                            Mentor.push(mentor[me]);
                            delete_num.push(fg);
                            // alert(fg);
                        }
                    }
                }
            }
        }
        var new_mentor = [];
        for (var new_ = 0; new_ < mentor.length;new_++){
            var flag_new = 0;
            for (var new_1 = 0; new_1 < delete_num.length;new_1++){
                if (delete_num[new_1] === new_){
                    flag = 1;
                }
            }
            if (flag !== 1) {
                new_mentor.push(mentor[new_]);
            }
        }
        console.log(Mentor);
        $('#dg').treegrid('loadData', new_mentor);
    }
</script>
<body style="background-color: #95B8E7">
<div style="margin: 50px 0 0 150px">
    <div style="display: inline-block;">
        <label for="text">
            <h2>请在下方输入学术家族树：
                <a href="#" class="easyui-linkbutton" onclick="pro()">提示</a>&nbsp;&nbsp;
                <a href="#" class="easyui-linkbutton" onclick="show()">展示成树</a>
            </h2>
        </label>
        <textarea id="text" style="width: 400px;height: 450px;">

        </textarea>
    </div>
    <div style="margin-left:50px;display: inline-block;">
        <table id="dg" title="树浏览" class="easyui-treegrid" style="width:700px;height:500px"
               data-options="
				url: '',
				rownumbers: true,
				idField: 'id',
				treeField: 'name'
			">
            <thead>
            <tr>
                <th data-options="field:'name'" width="500">导师--年级--学生--技能</th>
                <!--                <th data-options="field:'grade'" width="300">年级</th>-->
                <!--                <th data-options="field:'skills'" align="right">技能</th>-->
                <!--            <th data-options="field:'date'" width="150">修改日期</th>-->
            </tr>
            </thead>
        </table>
    </div>
</div>
</body>
</html>

